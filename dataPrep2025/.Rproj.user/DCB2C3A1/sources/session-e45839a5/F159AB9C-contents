---
title: "PRADI Data Prep 2025"
output: 
  html_document:
    toc: true
    toc_float: true
    toc_collapsed: true
    toc_depth: 3
    number_sections: false
    theme: lumen
    css: "style.css"
---

Author: Mengna Zhang
Date: July 3rd, 2025

# Set Path

```{r}
#directory
directory <- "/Users/mengnazhang/Desktop/"
my_directory <- paste0(directory, "ADSP_DataPrep_local/PRADI/Phenotype/2025/Raw/")

## colnames excel file location
colnames_file <- "/Users/mengnazhang/Desktop/ADSP_DataPrep_local/PRADI/Phenotype/2025/Clean/colnamesPerSubdata.xlsx"
```

<br>

# Load Packages
```{r,message=FALSE,warning=FALSE}
require(dplyr)
require(readxl)
require(openxlsx)
```

<br>

# Load Helper Scripts
```{r}
source("/Users/mengnazhang/Desktop/ADSP_DataPrep/dataPrep2025/helperScripts.R")
```

<br>
<br>


# Sub Files Inspection

## Save all sub file names
**Extract all file names**
```{r engine='bash', comment=''}
mypath="/Users/mengnazhang/Desktop/ADSP_DataPrep_local/PRADI/Phenotype/2025/Raw/"

ls ${mypath} | grep ".xlsx" > ${mypath}filelist.txt

wc -l ${mypath}filelist.txt ## 38 sub files in total
```

<br>
<br>

## Load All Subfiles

```{r}

file_list <- paste0(my_directory,"filelist.txt")

## read all lines (file names) from the file
file_names <- readLines(file_list)

## loop over each file name
for (fname in file_names) {
  ## Extract the clean name by removing prefix and suffix
  clean_name <- sub("^PRADI_", "", fname)
  clean_name <- sub("_05122025\\.xlsx$", "", clean_name)
  
  ## read the Excel file and convert to data.frame
  data <- as.data.frame(read_excel(paste0(my_directory, fname),sheet = "Export Worksheet"))
  
  ## assign to a variable with the clean name in the global environment
  assign(clean_name, data, envir = .GlobalEnv)
  rm(data)
}

```

<br>
<br>

## Get Common Columns

```{r}
df_names <- ls()[sapply(mget(ls(), .GlobalEnv), is.data.frame)]

## extract the column names for each data frame
column_lists <- lapply(df_names, function(name) colnames(get(name)))

## find common columns across all data frames
common_cols <- Reduce(intersect, column_lists)

# Print the result
print(common_cols)
```

<br>
<br>

## Save all Colnames
```{r,eval=FALSE}
## this code only need to be run once
# Create a new workbook
wb <- createWorkbook()

# For each data frame, add a sheet with its column names
# Loop through each data frame
for (df_name in df_names) {
  df <- get(df_name)  # get the actual data frame
  col_names_df <- data.frame(VarNames = colnames(df))  # create single-column df

  # Add sheet with df name (truncated to 31 characters max)
  sheet_name <- substr(df_name, 1, 31)
  addWorksheet(wb, sheetName = sheet_name)

  # Write the column names into the sheet
  writeData(wb, sheet = sheet_name, col_names_df)
}

# Save the workbook
saveWorkbook(wb, file = colnames_file, overwrite = TRUE)

```

<br>
<br>

# Variable Check Per File


## AAAD_GERIAT

```{r}
str(AAAD_GERIAT)
```


```{r}
## extract character columns and check the unique values for all chracter columns
uniqueValforChrColumns(AAAD_GERIAT)

## extract logi columns and convert to characters
logicols <- colnames(AAAD_GERIAT)[sapply(AAAD_GERIAT, is.logical)]
AAAD_GERIAT[logicols] <- lapply(AAAD_GERIAT[logicols], as.character)

## convert date format
AAAD_GERIAT[["EXAM_DATE"]] <- as.Date(AAAD_GERIAT[["EXAM_DATE"]])
AAAD_GERIAT[["DATE_OF_BIRTH"]] <- as.Date(AAAD_GERIAT[["DATE_OF_BIRTH"]])
```

```{r}
str(AAAD_GERIAT)
```

<br>
<br>

## AAAD_MEDCON

```{r}
# AAAD_MEDCON <- as.data.frame(read_excel("/Users/mengnazhang/Desktop/ADSP_DataPrep_local/PRADI/Phenotype/2025/Raw/PRADI_AAAD_MEDCON_05122025.xlsx",sheet = "Export Worksheet"))

## extract all the unique data types
unique(sapply(AAAD_MEDCON, class))
```


```{r,eval=FALSE}
str(AAAD_MEDCON, max.level = 99, list.len = 99999)
```
<details>
<summary>Click for details</summary>
```{r, echo=FALSE, eval=TRUE}
str(AAAD_MEDCON, max.level = 99, list.len = 99999)
```
</details> 

<br>

### Pull the regenerated DD

```{r}
DD_AAAD_MEDCON <- read_excel("/Users/mengnazhang/Desktop/ADSP_DataPrep_local/PRADI/Phenotype/2025/Clean/colnamesPerSubdata.xlsx", sheet = "AAAD_MEDCON")
```

<br>

### Handling Logical Variables

```{r}
## extract all logical variables
logicols <- colnames(AAAD_MEDCON)[sapply(AAAD_MEDCON, is.logical)] ## 33 vars

## view those variables in the regeneraed DD
DD_AAAD_MEDCON[DD_AAAD_MEDCON$VarNames %in% logicols,c("VarNames","Data Type")]

## select the vars to be converted to numeric
convert2num <- DD_AAAD_MEDCON$VarNames[DD_AAAD_MEDCON$VarNames %in% logicols & grepl("NUMBER", DD_AAAD_MEDCON$`Data Type`)] ## 10 vars

## select the vars to be converted to character, since I did not see any variables should be converted to date type, I will then convert the rest to chracters
convert2chr <- setdiff(logicols,convert2num) ## 23 vars

## convert
AAAD_MEDCON[convert2num] <- lapply(AAAD_MEDCON[convert2num], as.numeric)
AAAD_MEDCON[convert2chr] <- lapply(AAAD_MEDCON[convert2chr], as.character)

## recheck the unique data types
unique(sapply(AAAD_MEDCON, class))
```
<br>

### Handling Date Variables

```{r}
## extract date variables from sub-dataset
datecols <- colnames(AAAD_MEDCON)[sapply(AAAD_MEDCON, function(x) inherits(x, c("POSIXct", "POSIXt")))] ## [1] "EXAM_DATE" "DATE_OF_BIRTH" "DATE_OF_ONSET"

## extarc date variables from regenerated DD
datecolsFromDD <- DD_AAAD_MEDCON$VarNames[DD_AAAD_MEDCON$`Data Type` %in% c("DATE","date")]

## compare the two to see if we missing any date variables
setdiff(datecols,datecolsFromDD)

head(AAAD_MEDCON[,datecols])

## convert format
AAAD_MEDCON[datecols] <- lapply(AAAD_MEDCON[datecols], as.Date)

## recheck the unique data types
unique(sapply(AAAD_MEDCON, class))
```

<br>

### Handling Chracter Variables
```{r}
## extract characteristic variables from sub-dataset
chrcols <- colnames(AAAD_MEDCON)[sapply(AAAD_MEDCON, is.character)] ## 76 vars

## extract characteristic variables with finite values
DD_AAAD_MEDCON[grepl("CHAR|VARCHAR", DD_AAAD_MEDCON$`Data Type`, ignore.case = TRUE) & !is.na(DD_AAAD_MEDCON$`Valid Responses`),
               c("VarNames","Valid Responses")]


## check unique values of those variables in the sub-dataset
unique(AAAD_MEDCON$DONT_KNOW) 

## for all characteristic variables, double check their data type in the DD, pull out mismatched cases
dismatchChrs <- DD_AAAD_MEDCON[
  DD_AAAD_MEDCON$VarNames %in% chrcols &
  !is.na(DD_AAAD_MEDCON$`Data Type`) &
  !grepl("^(varchar|char)", DD_AAAD_MEDCON$`Data Type`, ignore.case = TRUE),
  c("VarNames","Data Type")]

print(dismatchChrs)

## double check thier values and convert those to numeric if necessary

## DOA_UNK: I checked the DD and believe that DOA_UNK should be character
## SEEN2_SPEC: in the DD, this variable should be 0/1, but in the dataset it gots unique values: "10 mg b.i.d." "Duloxetine 60 mg q.d.", will contact cohort for this variable
## SEEN4_SPEC: in the DD, this variables should be 0/1, but in the dataset it gots unique values: "80 mg b.i.d.", will contact cohort for this variable as well.

```

<br>

### Handling Numeric Variables
```{r}
## extract numeric variables from sub-dataset
numcols <- colnames(AAAD_MEDCON)[sapply(AAAD_MEDCON, is.numeric)] ## 177 vars

## extract numeric variables from DD
numcolsFromDD <- DD_AAAD_MEDCON[grepl("number", DD_AAAD_MEDCON$`Data Type`, ignore.case = TRUE),
                                c("VarNames","Valid Responses")]

## remove "DOA_UNK" column as it should be character
numcolsFromDD <- subset(numcolsFromDD,VarNames != "DOA_UNK")
table(numcolsFromDD$`Valid Responses`,useNA = "ifany")

## Check numeric variables with unique values: 0/1
numcols_sub1 <- numcolsFromDD$VarNames[numcolsFromDD$`Valid Responses` =="0;\r\n1;" & !is.na(numcolsFromDD$`Valid Responses`)]
uniqueValCheck(AAAD_MEDCON,c(0,1),numcols_sub1)
## two variables pops up: SEEN2_SPEC and SEEN4_SPEC, we ignore them for now, as these are also the problematic found in the last step

## Check numeric variables with unique values: 0/1/7/8/9
numcols_sub2 <- numcolsFromDD$VarNames[numcolsFromDD$`Valid Responses` =="0;\r\n1;\r\n7;\r\n8;\r\n9;" & !is.na(numcolsFromDD$`Valid Responses`)]
uniqueValCheck(AAAD_MEDCON,c(0,1,7,8,9),numcols_sub2) ## all passed

## Check numeric variables with unique values: 0/1/9
numcols_sub3 <- numcolsFromDD$VarNames[numcolsFromDD$`Valid Responses` =="0;\r\n1;\r\n9;" & !is.na(numcolsFromDD$`Valid Responses`)]
uniqueValCheck(AAAD_MEDCON,c(0,1,9),numcols_sub3) ## all passed

## Check numeric variables with unique values: 0/1/9/-1
numcols_sub4 <- numcolsFromDD$VarNames[numcolsFromDD$`Valid Responses` =="0;\r\n1;\r\n9;\r\n-1;" & !is.na(numcolsFromDD$`Valid Responses`)]
uniqueValCheck(AAAD_MEDCON,c(0,1,9,-1),numcols_sub4) ## all passed

## Check numeric variables within value range:1 thru 9999;
numcols_sub5 <- numcolsFromDD$VarNames[numcolsFromDD$`Valid Responses` =="1 thru 9999;" & !is.na(numcolsFromDD$`Valid Responses`)]
range(AAAD_MEDCON[[numcols_sub5]]) ## passed

## Check numeric variables within value range:1 thru 99999;
numcols_sub6 <- numcolsFromDD$VarNames[numcolsFromDD$`Valid Responses` =="1 thru 99999;" & !is.na(numcolsFromDD$`Valid Responses`)]
range(AAAD_MEDCON[[numcols_sub6]]) ## the maximum values is 104530 in the dataset, but I think this is okay. So passes.

## For all numeric variables, double check their datatype with DD
mismatchNums <- DD_AAAD_MEDCON[
  DD_AAAD_MEDCON$VarNames %in% numcols &
  !is.na(DD_AAAD_MEDCON$`Data Type`) &
  !grepl("number", DD_AAAD_MEDCON$`Data Type`, ignore.case = TRUE),
  c("VarNames","Data Type")]

## view the mismatched variables
print(mismatchNums)

## check these mismatched variables unique values in the dataset
lapply(AAAD_MEDCON[mismatchNums$VarNames], unique)
## as these variables do have values 0/1 that not being mentioned in the DD, we need to ask the Cohort before handling them.
## To me, these variables do look like to be numeric variables, we probably need to update the data dictionary
## I check the DD, for similar variables like SEEN15, SEEN13, the DD do code them as numeric with 0 means "No" and 1 means "Yes".
## those are pair variables: SEENx and SEENx_SPEC, my understanding is that SEENx should be numeric and SEENx_SPEC should be characteristics. But clearly, the DD make them not consistently across all the pairs. 
```

